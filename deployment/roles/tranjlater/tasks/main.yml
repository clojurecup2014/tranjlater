---
- name: clojurecup user
  user: name=clojurecup comment="Clojure Cup Judges" home=/home/clojurecup

- name: ensure clojurecup .ssh dir
  file: path=/home/clojurecup/.ssh owner=clojurecup mode=0700 state=directory

- name: clojurecup authorized_keys
  copy: src=authorized_keys/clojurecup dest=/home/clojurecup/.ssh/authorized_keys owner=clojurecup mode=0600

- name: clojurecup judge commands
  copy: src="{{ item }}" dest="/usr/bin/{{ item }}" owner=root mode=0744
  with_items: clojure_cup_commands

- name: clojurecup sudoers
  template: src=sudoers.j2 dest=/etc/sudoers.d/clojurecup owner=root group=root mode=0440

- name: dkr user
  user: name=dkr comment="Docker" group=docker home=/home/dkr

- name: ensure dkr .ssh dir
  file: path=/home/dkr/.ssh owner=dkr mode=0700 state=directory

- name: jenkins dkr ssh key
  copy: src=authorized_keys/dkr dest=/home/dkr/.ssh/authorized_keys owner=dkr mode=0600

- name: pip
  apt: name=python-pip

- name: docker-py
  pip: name=docker-py

- name: docker nginx autoproxy
  docker: ports=80:80 image=colinrymer/nginx-proxy volumes=/var/run/docker.sock:/tmp/docker.sock state=running
  #docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock -t jwilder/nginx-proxy

- name: docker datomic-free
  docker: name=datomic image=colinrymer/docker-datomic-free state=running

- name: docker tranjlater
  docker: name="{{ app_container_name }}" image="{{ app_image_name_and_tag }}" ports=127.0.0.1::80 env="VIRTUAL_HOST={{ app_vhost }},NGINX_WEBSOCKETS_PATH={{ app_websockets_path }},DATOMIC_URI=datomic:free://datomic:4334" links=datomic:datomic

- name: deploy script
  template: src=deploy.j2 dest=/home/dkr/deploy.sh owner=dkr group=docker mode=0700

- name: datadog-agent apt repo
  apt_repository: repo='deb http://apt.datadoghq.com/ stable main' state=present

- name: datadog-agent apt key
  apt_key: keyserver=keyserver.ubuntu.com id=C7A7DA52

- name: datadog-agent apt pkg
  apt: name=datadog-agent update_cache=yes state=latest

- name: datadog-agent config
  command: "sh -c \"sed 's/api_key:.*/api_key: {{ datadog_api_key }}/' /etc/dd-agent/datadog.conf.example > /etc/dd-agent/datadog.conf\""
  args:
    creates: /etc/dd-agent/datadog.conf
  notify: restart datadog-agent

- name: datadog-agent service
  service: name=datadog-agent enabled=yes state=started

- name: datadog-agent docker
  docker: name=dd-agent privileged=true volumes="/var/run/docker.sock:/var/run/docker.sock,/proc/mounts:/host/proc/mounts:ro,/sys/fs/cgroup/:/host/sys/fs/cgroup:ro" env="API_KEY={{ datadog_api_key }}" image=datadog/docker-dd-agent hostname="{{ ansible_hostname }}"

    # docker run -d --privileged --name dd-agent -h `hostname` -v /var/run/docker.sock:/var/run/docker.sock -v /proc/mounts:/host/proc/mounts:ro -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro -e API_KEY={{ datadog_api_key }} datadog/docker-dd-agent

